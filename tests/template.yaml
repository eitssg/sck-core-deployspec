AWSTemplateFormatVersion: "2010-09-09"
Description: "Secure S3 bucket with role-based access control"

Parameters:
  BucketName:
    Type: "String"
    Description: "Name of the S3 bucket to create"
    Default: "my-secure-bucket"
    AllowedPattern: "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
    ConstraintDescription: "Bucket name must be lowercase, alphanumeric, and hyphens only"
    MinLength: 3
    MaxLength: 63

  RoleName:
    Type: "String"
    Description: "Name of the IAM role that will have access to the bucket"
    Default: "S3AccessRole"
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9-]*$"
    ConstraintDescription: "Role name must start with a letter and contain only alphanumeric characters and hyphens"

  Environment:
    Type: "String"
    Description: "Environment name for tagging"
    Default: "production"
    AllowedValues:
      - "development"
      - "staging"
      - "production"

Resources:
  # S3 Bucket with security configurations
  SecureS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${BucketName}-${AWS::AccountId}-${AWS::Region}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: "Enabled"
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogsBucket
        LogFilePrefix: "access-logs/"
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: "s3:ObjectCreated:*"
            CloudWatchConfiguration:
              LogGroupName: !Ref S3LogGroup
      LifecycleConfiguration:
        Rules:
          - Id: "DeleteIncompleteMultipartUploads"
            Status: "Enabled"
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: "TransitionToIA"
            Status: "Enabled"
            Transition:
              StorageClass: "STANDARD_IA"
              TransitionInDays: 30
          - Id: "TransitionToGlacier"
            Status: "Enabled"
            Transition:
              StorageClass: "GLACIER"
              TransitionInDays: 90
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "Purpose"
          Value: "SecureStorage"
        - Key: "ManagedBy"
          Value: "CloudFormation"

  # Access logs bucket for the main bucket
  AccessLogsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${BucketName}-access-logs-${AWS::AccountId}-${AWS::Region}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: "DeleteOldAccessLogs"
            Status: "Enabled"
            ExpirationInDays: 90
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "Purpose"
          Value: "AccessLogs"
        - Key: "ManagedBy"
          Value: "CloudFormation"

  # IAM Role with specific permissions for the S3 bucket
  S3AccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${RoleName}-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "sts:AssumeRole"
            Condition:
              StringEquals:
                "sts:ExternalId": !Ref "AWS::StackId"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "Purpose"
          Value: "S3Access"
        - Key: "ManagedBy"
          Value: "CloudFormation"

  # IAM Policy for S3 bucket access
  S3AccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "${BucketName}-access-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowListBucket"
            Effect: "Allow"
            Action:
              - "s3:ListBucket"
              - "s3:GetBucketLocation"
              - "s3:GetBucketVersioning"
            Resource: !GetAtt SecureS3Bucket.Arn
          - Sid: "AllowObjectAccess"
            Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:PutObject"
              - "s3:DeleteObject"
              - "s3:DeleteObjectVersion"
            Resource: !Sub "${SecureS3Bucket.Arn}/*"
          - Sid: "AllowEncryptionKeyAccess"
            Effect: "Allow"
            Action:
              - "kms:Decrypt"
              - "kms:GenerateDataKey"
            Resource: "*"
            Condition:
              StringEquals:
                "kms:ViaService": !Sub "s3.${AWS::Region}.amazonaws.com"
      Roles:
        - !Ref S3AccessRole

  # S3 Bucket Policy to restrict access to only the specific role
  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref SecureS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "DenyInsecureConnections"
            Effect: "Deny"
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !GetAtt SecureS3Bucket.Arn
              - !Sub "${SecureS3Bucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"
          - Sid: "AllowOnlySpecificRole"
            Effect: "Allow"
            Principal:
              AWS: !GetAtt S3AccessRole.Arn
            Action:
              - "s3:ListBucket"
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:PutObject"
              - "s3:DeleteObject"
              - "s3:DeleteObjectVersion"
            Resource:
              - !GetAtt SecureS3Bucket.Arn
              - !Sub "${SecureS3Bucket.Arn}/*"
          - Sid: "AllowCloudTrailAccess"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:PutObject"
            Resource: !Sub "${SecureS3Bucket.Arn}/cloudtrail-logs/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": "bucket-owner-full-control"
          - Sid: "AllowCloudTrailGetBucketAcl"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource: !GetAtt SecureS3Bucket.Arn
          - Sid: "DenyUnauthorizedAccess"
            Effect: "Deny"
            NotPrincipal:
              AWS:
                - !GetAtt S3AccessRole.Arn
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
              Service:
                - "cloudtrail.amazonaws.com"
                - "s3.amazonaws.com"
            Action: "s3:*"
            Resource:
              - !GetAtt SecureS3Bucket.Arn
              - !Sub "${SecureS3Bucket.Arn}/*"

  # CloudWatch Log Group for S3 events
  S3LogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/s3/${BucketName}"
      RetentionInDays: 30
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "Purpose"
          Value: "S3Monitoring"
        - Key: "ManagedBy"
          Value: "CloudFormation"

  # Instance Profile for EC2 instances to assume the role
  S3AccessInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Sub "${RoleName}-instance-profile"
      Roles:
        - !Ref S3AccessRole

  # KMS Key for additional encryption (optional)
  S3EncryptionKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Sub "KMS key for ${BucketName} S3 bucket encryption"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: "Allow S3 Service"
            Effect: "Allow"
            Principal:
              Service: "s3.amazonaws.com"
            Action:
              - "kms:Decrypt"
              - "kms:GenerateDataKey"
            Resource: "*"
          - Sid: "Allow Role Access"
            Effect: "Allow"
            Principal:
              AWS: !GetAtt S3AccessRole.Arn
            Action:
              - "kms:Decrypt"
              - "kms:GenerateDataKey"
            Resource: "*"
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "Purpose"
          Value: "S3Encryption"
        - Key: "ManagedBy"
          Value: "CloudFormation"

  # KMS Key Alias
  S3EncryptionKeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: !Sub "alias/${BucketName}-encryption-key"
      TargetKeyId: !Ref S3EncryptionKey

Outputs:
  BucketName:
    Description: "Name of the created S3 bucket"
    Value: !Ref SecureS3Bucket
    Export:
      Name: !Sub "${AWS::StackName}-BucketName"

  BucketArn:
    Description: "ARN of the created S3 bucket"
    Value: !GetAtt SecureS3Bucket.Arn
    Export:
      Name: !Sub "${AWS::StackName}-BucketArn"

  BucketDomainName:
    Description: "Domain name of the S3 bucket"
    Value: !GetAtt SecureS3Bucket.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-BucketDomainName"

  RoleArn:
    Description: "ARN of the IAM role with bucket access"
    Value: !GetAtt S3AccessRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RoleArn"

  InstanceProfileArn:
    Description: "ARN of the instance profile for EC2 instances"
    Value: !GetAtt S3AccessInstanceProfile.Arn
    Export:
      Name: !Sub "${AWS::StackName}-InstanceProfileArn"

  KMSKeyId:
    Description: "ID of the KMS key for bucket encryption"
    Value: !Ref S3EncryptionKey
    Export:
      Name: !Sub "${AWS::StackName}-KMSKeyId"

  KMSKeyArn:
    Description: "ARN of the KMS key for bucket encryption"
    Value: !GetAtt S3EncryptionKey.Arn
    Export:
      Name: !Sub "${AWS::StackName}-KMSKeyArn"

  AccessLogsBucket:
    Description: "Name of the access logs bucket"
    Value: !Ref AccessLogsBucket
    Export:
      Name: !Sub "${AWS::StackName}-AccessLogsBucket"
